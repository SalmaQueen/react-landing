{"ast":null,"code":"var _jsxFileName = \"/home/salma/Desktop/react-landing-page/src/Search/context/PropertyListingsProvider.js\";\nimport * as React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DefaultState = {\n  propertyListings: [],\n  filter: {}\n};\nconst PropertyListingsContext = /*#__PURE__*/React.createContext(DefaultState);\n_c = PropertyListingsContext;\nexport const PropertyListingsConsumer = PropertyListingsContext.Consumer;\nexport class PropertyListingsProvider extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = DefaultState;\n\n    this.getListingByPropertyId = propertyId => {\n      const {\n        propertyListings\n      } = this.state;\n      return propertyListings.find(listing => listing.id === Number(propertyId));\n    };\n\n    this.updateFilter = filter => {\n      this.setState({\n        filter\n      });\n    };\n  }\n\n  static applyFilter(listings, filter) {\n    const {\n      priceFrom,\n      postcode,\n      sortOrder\n    } = filter;\n    let result = listings;\n\n    if (priceFrom) {\n      const from = priceFrom;\n      result = result.filter(item => item.price >= from);\n    }\n\n    if (postcode) {\n      result = result.filter(item => item.postcode.toLowerCase().startsWith(postcode));\n    }\n\n    if (sortOrder) {\n      if (sortOrder === 'highestfirst') {\n        result = result.sort((a, b) => b.price - a.price);\n      }\n\n      if (sortOrder === 'lowestfirst') {\n        result = result.sort((a, b) => a.price - b.price);\n      }\n    }\n\n    return result;\n  }\n\n  componentDidMount() {\n    fetch('/server/listings.json').then(res => res.json()).then(res => {\n      this.setState({\n        propertyListings: res\n      });\n    });\n  }\n\n  render() {\n    const {\n      children\n    } = this.props;\n    const {\n      propertyListings,\n      filter\n    } = this.state;\n    const filteredListings = PropertyListingsProvider.applyFilter(propertyListings, filter);\n    return /*#__PURE__*/_jsxDEV(PropertyListingsContext.Provider, {\n      value: {\n        allListings: propertyListings,\n        propertyListings: filteredListings,\n        updateFilter: this.updateFilter,\n        getListingByPropertyId: this.getListingByPropertyId\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"PropertyListingsContext\");","map":{"version":3,"sources":["/home/salma/Desktop/react-landing-page/src/Search/context/PropertyListingsProvider.js"],"names":["React","DefaultState","propertyListings","filter","PropertyListingsContext","createContext","PropertyListingsConsumer","Consumer","PropertyListingsProvider","Component","state","getListingByPropertyId","propertyId","find","listing","id","Number","updateFilter","setState","applyFilter","listings","priceFrom","postcode","sortOrder","result","from","item","price","toLowerCase","startsWith","sort","a","b","componentDidMount","fetch","then","res","json","render","children","props","filteredListings","allListings"],"mappings":"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","sourcesContent":["import * as React from 'react'\n\nconst DefaultState = {\n  propertyListings: [],\n  filter: {}\n}\n\nconst PropertyListingsContext = React.createContext(DefaultState)\n\nexport const PropertyListingsConsumer = PropertyListingsContext.Consumer\n\nexport class PropertyListingsProvider extends React.Component {\n  static applyFilter(listings, filter) {\n    const { priceFrom, postcode, sortOrder } = filter\n    let result = listings\n    if (priceFrom) {\n      const from = priceFrom\n      result = result.filter(item => item.price >= from)\n    }\n    if (postcode) {\n      result = result.filter(item => item.postcode.toLowerCase().startsWith(postcode))\n    }\n    if (sortOrder) {\n      if (sortOrder === 'highestfirst') {\n        result = result.sort((a, b) => b.price - a.price)\n      }\n      if (sortOrder === 'lowestfirst') {\n        result = result.sort((a, b) => a.price - b.price)\n      }\n    }\n    return result\n  }\n\n  state = DefaultState\n\n  componentDidMount() {\n    fetch('/server/listings.json')\n      .then(res => res.json())\n      .then(res => {\n        this.setState({ propertyListings: res })\n      })\n  }\n\n  getListingByPropertyId = propertyId => {\n    const { propertyListings } = this.state\n    return propertyListings.find(listing => listing.id === Number(propertyId))\n  }\n\n  updateFilter = filter => {\n    this.setState({\n      filter\n    })\n  }\n\n  render() {\n    const { children } = this.props\n    const { propertyListings, filter } = this.state\n\n    const filteredListings = PropertyListingsProvider.applyFilter(\n      propertyListings,\n      filter\n    )\n\n    return (\n      <PropertyListingsContext.Provider\n        value={{\n          allListings: propertyListings,\n          propertyListings: filteredListings,\n          updateFilter: this.updateFilter,\n          getListingByPropertyId: this.getListingByPropertyId\n        }}\n      >\n        {children}\n      </PropertyListingsContext.Provider>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}